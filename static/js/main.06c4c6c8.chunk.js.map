{"version":3,"sources":["Fleshcard.jsx","FleshcardList.jsx","App.js","index.js"],"names":["Fleshcard","card","useState","flip","setFlip","score","setScore","className","styleCard","styleBlue","question","options","map","option","i","onClick","answer","key","styleRed","styleGreen","FleshcardList","fleshcards","styleYellow","index","styleForm","App","setFleshcards","categoris","setCategoris","categoryEl","useRef","amountEl","decodeString","str","textArea","document","createElement","innerHTML","value","useEffect","axios","get","then","res","data","trivia_categories","style","onSubmit","e","preventDefault","params","amount","current","category","results","questions","correct_answer","incorrect_answers","id","Date","now","sort","Math","random","htmlFor","ref","name","type","min","step","defaultValue","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.06c4c6c8.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport 'tachyons'\r\n\r\n\r\nexport default function Fleshcard({ card }) {\r\n    const [flip, setFlip] = useState()\r\n    const [score, setScore] = useState([])\r\n\r\n\r\n\r\n    function PluseScore() {\r\n        if (score <= 0 && flip !== true) {\r\n            setScore(score + 150)\r\n            setFlip(!flip)\r\n        }\r\n    }\r\n\r\n    function MinScore() {\r\n        if (flip !== true && score > -150) {\r\n            setScore(score - 50)\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className={styleCard}>\r\n            <div className={styleBlue}>\r\n                <h4>{card.question}</h4>\r\n            </div>\r\n            <div className={styleBlue}>\r\n                {card.options.map((option, i) => {\r\n                    return <div onClick={() => {\r\n                        if (option === card.answer) {\r\n                            PluseScore()\r\n                        } else {\r\n                            MinScore()\r\n                        }\r\n                    }} key={i} className={styleRed}>{option}</div>\r\n                })}\r\n            </div>\r\n            <h3 className={flip ? styleRed : styleGreen}>Answer: {flip ? card.answer : ''}<br></br>score:{score}\r\n            </h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nlet styleCard = `light-black b--black-10 mv4 w-100 w-50-m w-25-l mw5 center`\r\nlet styleRed = `tc bg-washed-red dib br3 pa3 ma2 grow bw2 shadow-5`\r\nlet styleBlue = `tc bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5`\r\nlet styleGreen = `tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5`\r\n\r\n\r\n","import React from 'react';\r\nimport 'tachyons'\r\nimport Fleshcard from './Fleshcard';\r\n\r\n\r\nexport default function FleshcardList({ fleshcards }) {\r\n\r\n    return (\r\n        <div className={styleYellow}>\r\n            {fleshcards.map((card , index) => {\r\n                return <Fleshcard card={card} key={index}/>\r\n            })} \r\n    </div>\r\n    )\r\n}\r\n      \r\nlet styleYellow = `tc bg-light-yellow dib br3 pa3 ma2 flex flex-wrap f4 lh-copy`","import React, { useState, useEffect, useRef } from 'react';\nimport FleshcardList from './FleshcardList';\nimport 'tachyons'\nimport axios from 'axios'\n\n\nfunction App() {\n  const [fleshcards, setFleshcards] = useState([])\n  const [categoris, setCategoris] = useState([])\n\n  const categoryEl = useRef()\n  const amountEl = useRef()\n\n  useEffect(() => {\n    axios.get(`https://opentdb.com/api_category.php`)\n      .then(res => {\n        setCategoris(res.data.trivia_categories)\n      })\n  }, [])\n\n\n  function decodeString(str) {\n    const textArea = document.createElement('textarea')\n    textArea.innerHTML = str\n    return textArea.value\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault()\n    axios.get(`https://opentdb.com/api.php?amount=50`, {\n      params: {\n        amount: amountEl.current.value,\n        category: categoryEl.current.value\n      }\n    })\n      .then(res => {\n        setFleshcards(res.data.results.map((questions, index) => {\n          const answer = decodeString(questions.correct_answer)\n          const options = [...questions.incorrect_answers.map((answer) => decodeString(answer)), answer]\n          return {\n            id: `${index}` - `${Date.now}`,\n            question: decodeString(questions.question),\n            answer: answer,\n            options: options.sort(() => Math.random() - .5)\n          }\n        }))\n      })\n  }\n\n  return (\n    <>\n      <div style={{ 'fontFamily': 'cursive' }}>\n        <form className={styleForm} onSubmit={handleSubmit}>\n          <div className={styleBlue}>\n            <label htmlFor=\"category\">Category:</label>\n            <select className={styleRed} id=\"category\" ref={categoryEl}>\n              {categoris.map((category) => {\n                return <option value={category.id} key={category.id}>{category.name}</option>\n              })}\n            </select>\n          </div>\n          <div className={styleBlue}>\n            <label htmlFor=\"amount\">Number of questions:</label>\n            <input className={styleRed} type=\"number\" id=\"amount\" min=\"1\" step=\"1\" defaultValue={10} ref={amountEl}></input>\n          </div>\n          <div className={styleBlue}>\n            <button className={styleRed}>Generate</button>\n          </div>\n        </form>\n        <div className=\"App\">\n          <FleshcardList fleshcards={fleshcards} />\n        </div>\n      </div>\n    </>\n  );\n}\n\nlet styleForm = `tc bg-light-green br3 pa3 ma2 f4 lh-copy`\nlet styleRed = `tc bg-washed-red dib br3 pa2 ma1 f4 lh-copy`\nlet styleBlue = `tc bg-light-blue dib br3 pa3 ma2 f4 lh-copy`\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}